# Generated by Django 4.1.4 on 2023-06-27 16:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_bleach.models
import rules.contrib.models


class Migration(migrations.Migration):

    replaces = [('problems', '0001_initial'), ('problems', '0002_problem_parent'), ('problems', '0003_html_description'), ('problems', '0004_problem_tags')]

    initial = True

    dependencies = [
        ('tags', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Problem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('slug', models.CharField(blank=True, max_length=255)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subproblems', to='problems.problem')),
                ('description', django_bleach.models.BleachField()),
                ('tags', models.ManyToManyField(to='tags.tag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnswerKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=255)),
                ('problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_keys', to='problems.problem')),
            ],
        ),
        migrations.AddConstraint(
            model_name='problem',
            constraint=models.UniqueConstraint(condition=models.Q(('slug', ''), _negated=True), fields=('slug',), name='unique_problem_slug'),
        ),
    ]
